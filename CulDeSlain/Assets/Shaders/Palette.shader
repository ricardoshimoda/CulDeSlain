Shader "Custom/Palette"
{
    Properties 
    {
        _MainTex ("Texture", 2D) = "white" {}
		_Colorblind ("Colorblind mode active?", Float) = 0.0
		}
    SubShader 
    {
        Tags { "RenderType"="Opaque" }
		
        Pass 
        {
            CGPROGRAM
			
            #pragma vertex vert
            #pragma fragment frag
			
            #include "UnityCG.cginc"

            struct appdata {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
            };

            struct v2f {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
            };

            sampler2D _MainTex;
			float _Colorblind;

			static const float3 c_205[256] = {
                float3(6,0,19),
float3(25,20,29),
float3(233,227,150),
float3(206,187,108),
float3(181,143,70),
float3(158,102,40),
float3(132,59,17),
float3(120,37,15),
float3(210,121,126),
float3(187,106,110),
float3(164,93,98),
float3(141,81,82),
float3(118,65,69),
float3(94,53,53),
float3(72,40,41),
float3(54,29,29),
float3(75,9,212),
float3(67,8,189),
float3(58,7,166),
float3(50,6,144),
float3(41,6,121),
float3(33,5,98),
float3(24,4,76),
float3(29,16,68),
float3(130,149,168),
float3(114,133,148),
float3(101,117,132),
float3(86,102,112),
float3(73,86,96),
float3(57,70,76),
float3(45,55,60),
float3(34,40,46),
float3(162,111,112),
float3(149,98,99),
float3(133,86,87),
float3(120,78,79),
float3(104,69,69),
float3(91,57,57),
float3(75,48,48),
float3(71,47,53),
float3(162,127,184),
float3(146,115,164),
float3(130,103,148),
float3(114,91,131),
float3(98,78,111),
float3(82,66,95),
float3(66,54,78),
float3(55,43,63),
float3(202,151,163),
float3(179,134,144),
float3(158,118,128),
float3(138,102,112),
float3(114,86,92),
float3(94,71,76),
float3(73,55,57),
float3(62,49,55),
float3(141,136,188),
float3(123,121,167),
float3(109,104,148),
float3(94,90,127),
float3(79,74,108),
float3(65,57,86),
float3(50,44,68),
float3(37,32,51),
float3(232,152,140),
float3(209,132,121),
float3(186,115,105),
float3(164,98,92),
float3(142,82,76),
float3(119,69,63),
float3(97,53,50),
float3(76,56,37),
float3(21,199,20),
float3(18,187,17),
float3(15,157,13),
float3(13,129,10),
float3(10,104,7),
float3(7,76,5),
float3(5,48,3),
float3(2,27,1),
float3(56,179,250),
float3(41,150,229),
float3(31,121,208),
float3(21,96,187),
float3(14,75,166),
float3(8,55,145),
float3(3,35,124),
float3(22,42,115),
float3(249,241,220),
float3(214,196,180),
float3(182,152,140),
float3(151,115,107),
float3(119,83,78),
float3(88,55,53),
float3(56,28,28),
float3(28,11,11),
float3(237,216,228),
float3(195,176,195),
float3(157,140,166),
float3(122,107,137),
float3(91,78,107),
float3(63,53,78),
float3(36,28,49),
float3(37,31,20),
float3(250,244,0),
float3(222,187,0),
float3(194,137,0),
float3(170,95,0),
float3(142,61,0),
float3(118,34,0),
float3(90,11,0),
float3(68,3,0),
float3(228,0,2),
float3(203,0,21),
float3(181,0,21),
float3(156,0,20),
float3(133,0,20),
float3(108,0,20),
float3(86,0,19),
float3(80,16,19),
float3(228,192,19),
float3(203,163,18),
float3(178,137,18),
float3(155,112,18),
float3(130,90,17),
float3(108,71,17),
float3(82,50,17),
float3(62,37,16),
float3(0,0,35),
float3(0,0,246),
float3(0,0,242),
float3(0,0,234),
float3(0,0,230),
float3(0,0,226),
float3(0,0,222),
float3(0,0,218),
float3(0,0,214),
float3(0,0,210),
float3(0,0,206),
float3(0,0,202),
float3(0,0,198),
float3(0,0,194),
float3(0,0,190),
float3(0,0,186),
float3(0,0,182),
float3(0,0,178),
float3(0,0,173),
float3(0,0,166),
float3(0,0,162),
float3(0,0,158),
float3(0,0,154),
float3(0,0,150),
float3(0,0,146),
float3(0,0,142),
float3(0,0,138),
float3(0,0,134),
float3(0,0,130),
float3(0,0,126),
float3(0,0,122),
float3(0,0,118),
float3(21,21,131),
float3(20,20,126),
float3(19,19,119),
float3(18,18,115),
float3(17,17,111),
float3(16,16,107),
float3(15,15,103),
float3(14,14,99),
float3(13,13,95),
float3(12,12,91),
float3(11,11,87),
float3(10,10,83),
float3(10,10,79),
float3(9,9,75),
float3(8,8,71),
float3(7,7,67),
float3(229,229,251),
float3(215,215,242),
float3(204,204,236),
float3(193,193,231),
float3(182,182,225),
float3(171,171,220),
float3(160,160,214),
float3(151,149,208),
float3(163,142,197),
float3(150,131,190),
float3(137,120,186),
float3(128,113,183),
float3(118,105,179),
float3(106,95,175),
float3(96,87,172),
float3(88,81,168),
float3(0,21,229),
float3(0,19,207),
float3(0,17,185),
float3(0,14,163),
float3(0,12,145),
float3(0,10,123),
float3(0,8,101),
float3(21,7,79),
float3(250,21,21),
float3(226,19,19),
float3(202,17,17),
float3(178,15,15),
float3(154,13,13),
float3(130,11,11),
float3(106,9,9),
float3(87,7,7),
float3(21,246,0),
float3(21,220,0),
float3(21,196,0),
float3(21,169,0),
float3(21,146,0),
float3(21,119,0),
float3(21,96,0),
float3(41,88,21),
float3(250,228,250),
float3(222,203,222),
float3(198,181,198),
float3(174,159,174),
float3(150,137,150),
float3(126,115,126),
float3(102,93,102),
float3(80,73,80),
float3(231,193,0),
float3(232,179,1),
float3(233,166,3),
float3(235,153,4),
float3(236,143,6),
float3(238,130,7),
float3(239,117,8),
float3(241,100,30),
float3(240,11,240),
float3(216,13,216),
float3(195,14,195),
float3(175,16,175),
float3(154,17,154),
float3(134,18,134),
float3(113,20,113),
float3(95,21,95),
float3(1,1,1),
float3(13,13,13),
float3(30,30,30),
float3(49,49,49),
float3(65,65,65),
float3(81,81,81),
float3(98,98,98),
float3(117,117,117),
float3(133,133,133),
float3(149,149,149),
float3(166,166,166),
float3(185,185,185),
float3(201,201,201),
float3(217,217,217),
float3(234,234,234),
float3(252,252,252)
            };
            static const float3 P_95[256] = 
            {
			    float3(0,0,0),
                float3(128,0,0),
                float3(0,128,0),
                float3(128,128,0),
                float3(0,0,128),
                float3(128,0,128),
                float3(0,128,128),
                float3(192,192,192),
                float3(192,220,192),
                float3(166,202,240),
                float3(42,63,170),
                float3(42,63,255),
                float3(42,95,0),
                float3(42,95,85),
                float3(42,95,170),
                float3(42,95,255),
                float3(42,127,0),
                float3(42,127,85),
                float3(42,127,170),
                float3(42,127,255),
                float3(42,159,0),
                float3(42,159,85),
                float3(42,159,170),
                float3(42,159,255),
                float3(42,191,0),
                float3(42,191,85),
                float3(42,191,170),
                float3(42,191,255),
                float3(42,223,0),
                float3(42,223,85),
                float3(42,223,170),
                float3(42,223,255),
                float3(42,255,0),
                float3(42,255,85),
                float3(42,255,170),
                float3(42,255,255),
                float3(85,0,0),
                float3(85,0,85),
                float3(85,0,170),
                float3(85,0,255),
                float3(85,31,0),
                float3(85,31,85),
                float3(85,31,170),
                float3(85,31,255),
                float3(85,63,0),
                float3(85,63,85),
                float3(85,63,170),
                float3(85,63,255),
                float3(85,95,0),
                float3(85,95,85),
                float3(85,95,170),
                float3(85,95,255),
                float3(85,127,0),
                float3(85,127,85),
                float3(85,127,170),
                float3(85,127,255),
                float3(85,159,0),
                float3(85,159,85),
                float3(85,159,170),
                float3(85,159,255),
                float3(85,191,0),
                float3(85,191,85),
                float3(85,191,170),
                float3(85,191,255),
                float3(85,223,0),
                float3(85,223,85),
                float3(85,223,170),
                float3(85,223,255),
                float3(85,255,0),
                float3(85,255,85),
                float3(85,255,170),
                float3(85,255,255),
                float3(127,0,0),
                float3(127,0,85),
                float3(127,0,170),
                float3(127,0,255),
                float3(127,31,0),
                float3(127,31,85),
                float3(127,31,170),
                float3(127,31,255),
                float3(127,63,0),
                float3(127,63,85),
                float3(127,63,170),
                float3(127,63,255),
                float3(127,95,0),
                float3(127,95,85),
                float3(127,95,170),
                float3(127,95,255),
                float3(127,127,0),
                float3(127,127,85),
                float3(127,127,170),
                float3(127,127,255),
                float3(127,159,0),
                float3(127,159,85),
                float3(127,159,170),
                float3(127,159,255),
                float3(127,191,0),
                float3(127,191,85),
                float3(127,191,170),
                float3(127,191,255),
                float3(127,223,0),
                float3(127,223,85),
                float3(127,223,170),
                float3(127,223,255),
                float3(127,255,0),
                float3(127,255,85),
                float3(127,255,170),
                float3(127,255,255),
                float3(170,0,0),
                float3(170,0,85),
                float3(170,0,170),
                float3(170,0,255),
                float3(170,31,0),
                float3(170,31,85),
                float3(170,31,170),
                float3(170,31,255),
                float3(170,63,0),
                float3(170,63,85),
                float3(170,63,170),
                float3(170,63,255),
                float3(170,95,0),
                float3(170,95,85),
                float3(170,95,170),
                float3(170,95,255),
                float3(170,127,0),
                float3(170,127,85),
                float3(170,127,170),
                float3(170,127,255),
                float3(170,159,0),
                float3(170,159,85),
                float3(170,159,170),
                float3(170,159,255),
                float3(170,191,0),
                float3(170,191,85),
                float3(170,191,170),
                float3(170,191,255),
                float3(170,223,0),
                float3(170,223,85),
                float3(170,223,170),
                float3(170,223,255),
                float3(170,255,0),
                float3(170,255,85),
                float3(170,255,170),
                float3(170,255,255),
                float3(212,0,0),
                float3(212,0,85),
                float3(212,0,170),
                float3(212,0,255),
                float3(212,31,0),
                float3(212,31,85),
                float3(212,31,170),
                float3(212,31,255),
                float3(212,63,0),
                float3(212,63,85),
                float3(212,63,170),
                float3(212,63,255),
                float3(212,95,0),
                float3(212,95,85),
                float3(212,95,170),
                float3(212,95,255),
                float3(212,127,0),
                float3(212,127,85),
                float3(212,127,170),
                float3(212,127,255),
                float3(212,159,0),
                float3(212,159,85),
                float3(212,159,170),
                float3(212,159,255),
                float3(212,191,0),
                float3(212,191,85),
                float3(212,191,170),
                float3(212,191,255),
                float3(212,223,0),
                float3(212,223,85),
                float3(212,223,170),
                float3(212,223,255),
                float3(212,255,0),
                float3(212,255,85),
                float3(212,255,170),
                float3(212,255,255),
                float3(255,0,85),
                float3(255,0,170),
                float3(255,31,0),
                float3(255,31,85),
                float3(255,31,170),
                float3(255,31,255),
                float3(255,63,0),
                float3(255,63,85),
                float3(255,63,170),
                float3(255,63,255),
                float3(255,95,0),
                float3(255,95,85),
                float3(255,95,170),
                float3(255,95,255),
                float3(255,127,0),
                float3(255,127,85),
                float3(255,127,170),
                float3(255,127,255),
                float3(255,159,0),
                float3(255,159,85),
                float3(255,159,170),
                float3(255,159,255),
                float3(255,191,0),
                float3(255,191,85),
                float3(255,191,170),
                float3(255,191,255),
                float3(255,223,0),
                float3(255,223,85),
                float3(255,223,170),
                float3(255,223,255),
                float3(255,255,85),
                float3(255,255,170),
                float3(204,204,255),
                float3(255,204,255),
                float3(51,255,255),
                float3(102,255,255),
                float3(153,255,255),
                float3(204,255,255),
                float3(0,127,0),
                float3(0,127,85),
                float3(0,127,170),
                float3(0,127,255),
                float3(0,159,0),
                float3(0,159,85),
                float3(0,159,170),
                float3(0,159,255),
                float3(0,191,0),
                float3(0,191,85),
                float3(0,191,170),
                float3(0,191,255),
                float3(0,223,0),
                float3(0,223,85),
                float3(0,223,170),
                float3(0,223,255),
                float3(0,255,85),
                float3(0,255,170),
                float3(42,0,0),
                float3(42,0,85),
                float3(42,0,170),
                float3(42,0,255),
                float3(42,31,0),
                float3(42,31,85),
                float3(42,31,170),
                float3(42,31,255),
                float3(42,63,0),
                float3(42,63,85),
                float3(255,251,240),
                float3(160,160,164),
                float3(128,128,128),
                float3(255,0,0),
                float3(0,255,0),
                float3(255,255,0),
                float3(0,0,255),
                float3(255,0,255),
                float3(0,255,255),
                float3(255,255,255)
            };

			static const float3 PALETTE_RGB[71] =
{
float3(23,	32,	56),
float3(37,	58,	94),
float3(60,	94,	139),
float3(79,	143,	186),
float3(115,	190,	211),
float3(164,	221,	219),

float3(25, 51,	45),
float3(37,	86,	46),
float3(70,	130,	50),
float3(117,	167,	67),
float3(168,	202,	88),
float3(208,	218,	145),
float3(77,	43,	50),
float3(122,	72,	65),

float3(173,	119,	87),
float3(192,	148,	115),
float3(215,	181,	148),
float3(231,	213,	179),
float3(52,	28,	39),
float3(96,	44,	44),
float3(136,	75,	43),
float3(190,	119,	43),

float3(222,	158,	65),
float3(232,	193,	112),
float3(36,	21,	39),
float3(65,	29,	49),
float3(117,	36,	56),
float3(165,	48,	48),
float3(207,	87,	60),
float3(218,	134,	62),

float3(30,	29,	57),
float3(64,	39,	81),
float3(122,	54,	123),
float3(162,	62,	140),
float3(198,	81,	151),
float3(223,	132,	165),
float3(9,	10,	20),
float3(16,	20,	31),

float3(21,	29,	40),
float3(32,	46,	55),
float3(57,	74,	80),
float3(87,	114,	119),
float3(129,	151,	150),
float3(168,	181,	178),
float3(199,	207,	204),
float3(235,	237,	233),

float3(254,	224,	15), // Promise Yellow | ffe01a
float3(222,	242,	246), // Moonglow Blue | def2f6
float3(10,	13,	22), // Pelagic Blue | 0a0d16
float3(212,	235,	220), // Catalytic Green | d3eede
float3(222,	219,	220), // Etherfill Pink | de7778
float3(179,	214,	118), // Holograss Green | b3d676

float3(52, 49, 28), //Dark Brown | 34311c
float3(105, 98, 80), //Light Brown | 696250
float3(180, 150, 108), //Brown | b4966c
float3(227, 198, 154), //Beige | e3c69a
float3(220, 213, 214), //Snow Blue | dcd5d6
float3(194, 206, 197), //Light Clay | c2cec5
float3(150, 156, 167), //Smooth Blue | 969ca7
float3(75, 86, 39), //Camo Green | 4b5627
float3(84, 83, 58), //Puke Green | 54533a
float3(102, 120, 47), //Leaf Green | 66782f
float3(126, 140, 71), //Happy Green | 7e8c47
float3(143, 161, 62), //Bright Green | 8fa13e
float3(148, 150, 149), //Gray Blue | 949695
float3(134, 153, 167), //Sea Bue | 8699a7
float3(64, 96, 101), //Dark Teal | 406065
float3(86, 87, 88), //Gray | 565758
float3(154, 141, 109), //Beige Brown | 9a8d6d

float3(0,0,0),//black
float3(0,0,0)//black
};
			static const float3 PALETTE[16] =
            {
                float3(0, 0, 0),
                float3(256, 256, 256),
                float3(0, 255, 255),
                float3(255, 255, 0),
                float3(255, 0, 255),
                float3(0, 0, 255),
                float3(0, 255, 0),
                float3(255, 0, 0),
                float3(30, 30, 30),
                float3(100, 100, 100),

                float3(254, 224, 15), // Promise Yellow | ffe01a
                float3(222, 242, 246), // Moonglow Blue | def2f6
                float3(10, 13, 22), // Pelagic Blue | 0a0d16
                float3(212, 235, 220), // Catalytic Green | d3eede
                float3(222, 219, 220), // Etherfill Pink | de7778
                float3(179, 214, 118), // Holograss Green | b3d676
            };
			
            static const float3 PALETTE_movie[9] =
            {
                float3(55,47,58),
                float3(70,68,89),
                float3(84,94,114),
                float3(93,118,128),
                float3(106,147,149),
                float3(123,173,159),
                float3(142,178,154),
                float3(179,198,180),
                float3(197,210,206),
                float3(211,216,217),
            };

            v2f vert (appdata v) // Vertex Shader
            {
                v2f o;
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            fixed4 frag (v2f i) : SV_Target { // Fragment Shader
                fixed4 color_tex = tex2D(_MainTex, i.uv);
				// compare color_tex to the Palette using manhattan distance and return the closest color
				fixed4 color_out = fixed4(0,0,0,1);
				float min_dist = 1000000; // very large number
				int best_color = 0;
				
				for (int i = 0; i < 10; i++)
				{
				    float dist = abs(color_tex.r - PALETTE_movie[i].r/256) + abs(color_tex.g - PALETTE_movie[i].g/256) + abs(color_tex.b - PALETTE_movie[i].b/256);
				    if (dist < min_dist)
				    {
				        min_dist = dist;
						best_color = i;
					}
                }
				color_out = fixed4(PALETTE_movie[best_color].r/256,PALETTE_movie[best_color].g/256,PALETTE_movie[best_color].b/256,1);
				return color_out;
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
}

